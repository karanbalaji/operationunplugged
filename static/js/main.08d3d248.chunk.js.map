{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","createTheme","primary","secondary","tertiary","quaternary","data","labels","datasets","backgroundColor","hoverBackgroundColor","Presentation","react_default","a","createElement","deck","transition","transitionDuration","controls","slide","bgColor","heading","size","fit","lineHeight","textColor","appear","components_text","textSize","bold","margin","textFont","style","textAlign","react_chartjs_2_es","delay","es","interval","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_Presentation","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08d3d248.chunk.js","sourcesContent":["// Import React\nimport React from 'react';\nimport TextLoop from \"react-text-loop\";\nimport Chart from '../src/component/ChartReact';\nimport {Doughnut} from 'react-chartjs-2';\n\n\n\n// Import Spectacle Core tags\n\nimport {\n  BlockQuote,\n  Cite,\n  Deck,\n  Heading,\n\n  List,\n  ListItem,\n  Notes,\n  Quote,\n  Slide,\n  Text,\n  Appear\n} from 'spectacle';\n\n// Import theme\nimport createTheme from 'spectacle/lib/themes/default';\n\n// const images = {\n//   formidagon: require('../assets/formidable-logo.svg'),\n//   goodWork: require('../assets/good-work.gif')\n// };\n\n// Require CSS\n\n\nconst theme = createTheme(\n  {\n    primary: 'white',\n    secondary: '#1F2022',\n    tertiary: '#03A9FC',\n    quaternary: '#CECECE'\n    \n  },\n  {\n    primary: 'Montserrat',\n    secondary: 'Roboto'\n    \n  }\n);\n\nconst data = {\n\tlabels: [\n\t\t'Age 20-24',\n\t\t'Age 25-29',\n\t\t'Age 30-34'\n\t],\n\tdatasets: [{\n\t\tdata: [411945, 424345, 419845],\n\t\tbackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t],\n\t\thoverBackgroundColor: [\n\t\t'#FF6384',\n\t\t'#36A2EB',\n\t\t'#FFCE56'\n\t\t]\n\t}]\n};\n\nexport default class Presentation extends React.Component {\n  render() {\n    return (\n      <Deck\n        transition={['fade', 'slide']}\n        transitionDuration={500}\n        theme={theme}\n        controls={false}\n      >\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            The Problem \n          </Heading>\n          <Appear>\n          <Text textSize='70px' textColor=\"tertiary\" bold>\n            Depression & Loneliness\n          </Text>\n          </Appear>\n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\" margin=\"0.25em\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            Why is it a problem ? \n          </Heading>\n          <br></br>\n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n            \n            <Appear>\n           <span> People who are new to toronto/place find it hard to socialize with people because they cannot find others who want to socialize in person.</span>\n           </Appear>\n            <br></br>\n            <br></br>\n            <Appear>\n            <span>With Physical absence of meaningful people around a person can cause Loneliness & at the same time, loneliness may be a symptom of another social or psychological problem, such as chronic depression.</span>\n            </Appear>\n          </Text>\n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            How do you know ?\n          </Heading>\n          <br></br>\n          <Appear>\n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n          UK has a Minister of loneliness now. \n          This is a rising problem in the developed nation as people are more addicted to technology that they forget about people around them.\n          </Text>\n          </Appear>\n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            Why do you want to do it ?\n          </Heading>\n          <br></br>\n          <Appear>\n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n          Sustainability is my passion which drives me to solve and optimize problems that are related to it. \n\n          </Text>\n          </Appear>\n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            What is the Product ?\n          </Heading>\n          <br></br>\n          <Appear>\n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n          Socializing App that brings people together to do an activity like bowling,Coffee etc.\n            which bonds people for effective interaction of emotions, experiences,ideas in groups or person without the use of messenger technology.\n\n          </Text>\n          </Appear>\n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          \n          <h4>Students, Travellers On Job & New People to locality</h4>\n          <Doughnut data={data} />\n         \n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            Why does it need to be an App ?\n          </Heading>\n          <br></br>\n          \n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n          <Appear>\n         <span> People are addicted to more virtual way of communication than interacting with people in person which subconsciously detaches them from the real social world. </span>\n         </Appear>\n         <br></br>\n         <br></br>\n         <Appear>\n        <span>The only way to connect these people back to socializing in person is to make them use the app itself.</span>\n        </Appear>\n          </Text>\n          \n        </Slide>\n\n        <Slide transition={['slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            What will the users actually do ?\n          </Heading>\n          <br></br>\n          \n          <Text textSize='30px' textFont='secondary' textColor=\"tertiary\" style={{textAlign:'left'}}>\n          <Appear>\n          <span>They will meet people or group of people who are open to talk/meet nearby based on time & location</span>\n          </Appear>\n          <br></br>\n          <br></br>\n          \n          <Appear>\n          <span>Once they reach the place they will tap to let other users know they have arrived</span>\n          </Appear>        \n          </Text>\n\n        </Slide>\n\n        <Slide delay={2000} transition={['zoom' ,'slide']} bgColor=\"primary\">\n          <Heading size={1} fit lineHeight={1} textColor=\"secondary\">\n            Tweetup.io\n          </Heading>\n          <br></br>\n          \n          <Text textSize='70px' textFont='secondary' textColor=\"tertiary\">\n          Where people {\" \"}\n          <TextLoop interval={[1500]} >\n                    <span style={{color:'#FD297B'}}> meet</span>\n                    <span style={{color:'#3C5A99'}}> socialize</span>\n                    <span style={{color:'#00e640'}}> explore</span>\n            </TextLoop>\n        \n          </Text>\n        \n        </Slide>\n\n          {/* <Image src={images.goodWork} width={500} /> */}\n        \n        \n        \n      </Deck>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}